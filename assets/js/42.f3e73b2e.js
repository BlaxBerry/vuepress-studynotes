(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{423:function(t,a,n){"use strict";n.r(a);var s=n(28),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"react-路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-路由"}},[t._v("#")]),t._v(" React 路由")]),t._v(" "),n("p",[t._v("SPA路由在React中可理解为**：URL路径与组件的对应关系**")]),t._v(" "),n("p",[t._v("即配置路径和组件")]),t._v(" "),n("h3",{attrs:{id:"安装和导入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装和导入"}},[t._v("#")]),t._v(" 安装和导入")]),t._v(" "),n("p",[t._v("安装 "),n("strong",[t._v("React-Router-Dom")]),t._v(" 包")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" react-router-dom\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#或")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i react-router-dom\n")])])]),n("p",[t._v("导入项目")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import {BrowserRouter as Router} from 'react-router-dom';\n")])])]),n("h3",{attrs:{id:"router组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#router组件"}},[t._v("#")]),t._v(" Router组件")]),t._v(" "),n("p",[t._v("首先需要Router组件用于包裹整个项目")]),t._v(" "),n("p",[t._v("只有被Router包裹的应用才能使用路由")]),t._v(" "),n("p",[t._v("整个项目只会使用Router组件一次")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ReactDOM.render(\n  <Router>\n    \t<App/>\n \t </Router>,\n  document.getElementById('root')\n)\n")])])]),n("p",[t._v("Router组件 分为两类：")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("BrowserRouter")]),t._v("\t推荐")]),t._v(" "),n("p",[t._v("使用H5的historyAPI")]),t._v(" "),n("p",[n("code",[t._v("localhost:3000/first")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("HashRouter")])]),t._v(" "),n("p",[t._v("使用URL的哈希值实现")]),t._v(" "),n("p",[n("code",[t._v("localhost:3000/#/first")])])])]),t._v(" "),n("h3",{attrs:{id:"route组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#route组件"}},[t._v("#")]),t._v(" Route组件")]),t._v(" "),n("p",[t._v("是路由出口，Route组件写在哪对应组件就展示在哪")]),t._v(" "),n("p",[t._v("在Route组件设置路由匹配规则和对应指定URL地址展示的组件")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("**path属性 **指向路由URL")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("component属性")]),t._v(" 指向URL对应展示的组件名")])])]),t._v(" "),n("p",[t._v("路由内部会对URL地址与path指定的URL进行匹配，符合规则才会展示对应组件，详见 路由的两种 "),n("a",{attrs:{href:""}},[t._v("匹配模式")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('ReactDOM.render(\n  <Router>\n    <App>\n      \n\t\t\t<Route path="/first" component={First}></Route>\n      <Route path="/second" component={Second}></Route>\n      <Route path="/third" component={Third}></Route>\n      \n    </App>\n  </Router>,\n  document.getElementById(\'root\')\n)\n')])])]),n("p",[t._v("​")]),t._v(" "),n("h2",{attrs:{id:"声明式导航"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#声明式导航"}},[t._v("#")]),t._v(" 声明式导航")]),t._v(" "),n("p",[t._v("通过连接实现路由跳转")]),t._v(" "),n("h3",{attrs:{id:"使用步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用步骤"}},[t._v("#")]),t._v(" 使用步骤")]),t._v(" "),n("h4",{attrs:{id:"_1-导入核心组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-导入核心组件"}},[t._v("#")]),t._v(" 1. 导入核心组件")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Router（BrowserRouter）")])]),t._v(" "),n("li",[n("p",[t._v("Route")])]),t._v(" "),n("li",[n("p",[t._v("Link")])])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\n")])])]),n("hr"),t._v(" "),n("h4",{attrs:{id:"_2-设定路由入口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-设定路由入口"}},[t._v("#")]),t._v(" 2. 设定路由入口")]),t._v(" "),n("p",[t._v("通过Link组件设定路由的导航连接")]),t._v(" "),n("ul",[n("li",[t._v("**to属性 **指定URL地址的pathname")])]),t._v(" "),n("p",[t._v("Link组件最终被解析为 a标签，to属性被解析为href属性")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<Link to="/first">页面一</Link>\n<Link to="/second">页面二</Link>\n<Link to="/third">页面三</Link>\n')])])]),n("hr"),t._v(" "),n("h4",{attrs:{id:"_3-设置匹配规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置匹配规则"}},[t._v("#")]),t._v(" 3. 设置匹配规则")]),t._v(" "),n("p",[t._v("在Route组件设置对应指定URL地址展示的的组件")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("pathname 属性")]),t._v(" 就是路由规则，对应URL地址的pathname")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("component 属性")]),t._v(" 即URL地址对应展示的组件")])])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('ReactDOM.render(\n  <Router>\n    <div>\n      <Link to="/first">页面一</Link>\n      <Link to="/second">页面二</Link>\n      <Link to="/third">页面三</Link>\n\n      <Route path="/first" component={First}></Route>\n      <Route path="/second" component={Second}></Route>\n      <Route path="/third" component={Third}></Route>\n    </div>\n  </Router>,\n  document.getElementById(\'root\')\n)\n')])])]),n("h3",{attrs:{id:"全貌"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全貌"}},[t._v("#")]),t._v(" 全貌")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\n\n// 组件\nimport Home from \"./views/Home.jsx\"\nimport Management from './views/Management.jsx'\n\nReactDOM.render(\n  <Router>\n    <App>\n      <Link to=\"/home\">首页</Link>\n      <Link to=\"/management\">管理页面</Link>\n\n      <Route path=\"/home\" component={Home} />\n      <Route path=\"/management\" component={Management} />\n    </App>\n  </Router>,\n  document.getElementById('root')\n)\n")])])]),n("h3",{attrs:{id:"执行过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行过程"}},[t._v("#")]),t._v(" 执行过程")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("点击Link组件，修改URL地址")])]),t._v(" "),n("li",[n("p",[t._v("React路由监听URL地址栏变化")])]),t._v(" "),n("li",[n("p",[t._v("只要URL改变，React路由就 "),n("strong",[t._v("遍历所有Route组件")])])]),t._v(" "),n("li",[n("p",[t._v("React路由对使用path属性和URL地址的pathname进行匹配")]),t._v(" "),n("p",[t._v("路由规则path属性能匹配上URL的pathname时，展示对应组件")]),t._v(" "),n("p",[t._v("路由规则path属性能匹配不上URL的pathname时，不显示内容")])])]),t._v(" "),n("h2",{attrs:{id:"编程式导航"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编程式导航"}},[t._v("#")]),t._v(" 编程式导航")]),t._v(" "),n("p",[t._v("由代码实现路由跳转")]),t._v(" "),n("p",[t._v("在组件内通过事件触发路由跳转，")]),t._v(" "),n("h3",{attrs:{id:"使用步骤-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用步骤-2"}},[t._v("#")]),t._v(" 使用步骤")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("要有Route组件对应URL地址")])]),t._v(" "),n("li",[n("p",[t._v("在各个页面组件内")]),t._v(" "),n("p",[t._v("通过this.props.history实现路由跳转")])])]),t._v(" "),n("h3",{attrs:{id:"props-history"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#props-history"}},[t._v("#")]),t._v(" props.history")]),t._v(" "),n("p",[t._v("组件自身在没被传入数据或设定默认props数据时，是没有props属性的")]),t._v(" "),n("p",[t._v("但组件若被路由的"),n("strong",[t._v("Router组件匹配渲染")]),t._v("的话，")]),t._v(" "),n("p",[t._v("路由会给改组件传入一个路由对象")]),t._v(" "),n("p",[t._v("组件内部可通过props获取该路由对象")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  history"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  location"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  match"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("可通过其中的 "),n("strong",[t._v("history对象")]),t._v(" 实习路由的编程时导航")]),t._v(" "),n("p",[t._v("路由对象的hisroty对象中有几个方法：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("push")])]),t._v(" "),n("li",[n("strong",[t._v("go")])])]),t._v(" "),n("p",[t._v("组件内通过事件调用这些方法，实现不同方式的路由跳转：")]),t._v(" "),n("h4",{attrs:{id:"push"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[t._v("#")]),t._v(" push")]),t._v(" "),n("p",[t._v("跳转到"),n("strong",[t._v("具体的URL地址")])]),t._v(" "),n("p",[t._v("通过当前组件的**this.props.push(URL) **跳转到指定URL地址")]),t._v(" "),n("p",[t._v("然后展现对应的组件到页面")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("地址"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/home'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("如下：")]),t._v(" "),n("p",[t._v("First页面和Second页面中各有一个button按钮，")]),t._v(" "),n("p",[t._v("点击后分别跳转到对应的URL，然后展现对应的组件内容到页面")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class First extends React.Component {\n  goSecond = () => {\n    // console.log(this.props);\n    this.props.history.push('/second')\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.goSecond}>\n          页面二\n        </button>\n      </div>\n    )\n  }\n}\n\nclass Second extends React.Component {\n  goFirst = () => {\n    // console.log(this.props);\n    this.props.history.push('/first')\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.goFirst}>\n          页面一\n        </button>\n      </div>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Route path=\"/first\" component={First} />\n      <Route path=\"/second\" component={Second} />\n    </div>\n  </Router>,\n  document.getElementById('root')\n)\n")])])]),n("hr"),t._v(" "),n("h4",{attrs:{id:"go"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go"}},[t._v("#")]),t._v(" go")]),t._v(" "),n("p",[t._v("**前进或后退指定数量的页面，**正数前进，负数后退")]),t._v(" "),n("p",[t._v("通过当前组件的**this.props.go(页数) **跳转到指定URL地址")]),t._v(" "),n("p",[t._v("然后展现对应的组件到页面")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("go")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("go")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据访问记录前进两页")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("go")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据访问记录后退一页")]),t._v("\n")])])]),n("hr"),t._v(" "),n("h4",{attrs:{id:"back"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#back"}},[t._v("#")]),t._v(" back")]),t._v(" "),n("hr"),t._v(" "),n("h4",{attrs:{id:"forward"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#forward"}},[t._v("#")]),t._v(" forward")]),t._v(" "),n("hr"),t._v(" "),n("h4",{attrs:{id:"replace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" replace")]),t._v(" "),n("h2",{attrs:{id:"默认路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认路由"}},[t._v("#")]),t._v(" 默认路由")]),t._v(" "),n("p",[t._v("默认路由是指，打开应用首页时自动定位到URL地址并展示对应组件")]),t._v(" "),n("p",[t._v("应用首页URL是 "),n("strong",[t._v("/")]),t._v(" ，即设置默认路由就是：")]),t._v(" "),n("p",[n("strong",[t._v("Route组件匹配路由规则为 / 并展示对应的组件")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(' <Route path="/" component={ 默认展示的组件} />\n')])])]),n("p",[t._v("如下：")]),t._v(" "),n("p",[t._v("页面没有展示内容")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Home extends React.Component {\n  render() {\n    return (\n      <div>Home</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Router>\n    <App>\n      <Route path=\"/home\" component={Home} />\n    </App>\n  </Router>,\n  document.getElementById('root')\n)\n")])])]),n("p",[t._v("匹配路由规则为 "),n("strong",[t._v("/")]),t._v(" 之后，首页显示Home组件内容")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Home extends React.Component {\n  render() {\n    return (\n      <div>Home</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Router>\n    <App>\n      <Route path=\"/\" component={Home} />\n    </App>\n  </Router>,\n  document.getElementById('root')\n)\n")])])]),n("h2",{attrs:{id:"匹配模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匹配模式"}},[t._v("#")]),t._v(" 匹配模式")]),t._v(" "),n("h3",{attrs:{id:"模糊匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模糊匹配"}},[t._v("#")]),t._v(" 模糊匹配")]),t._v(" "),n("p",[t._v("React的路由是模糊匹配的。模糊匹配是指路由匹配URL和组件时，")]),t._v(" "),n("p",[n("strong",[t._v("只要URL地址的pathname是以Route的path属性值开头就匹配上")])]),t._v(" "),n("p",[t._v("会出现以下问题：")]),t._v(" "),n("hr"),t._v(" "),n("h4",{attrs:{id:"_1-默认路由永远被匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-默认路由永远被匹配"}},[t._v("#")]),t._v(" 1.  默认路由永远被匹配")]),t._v(" "),n("p",[t._v("因为默认路由的URL的pathname是  /，")]),t._v(" "),n("p",[t._v("Route组件匹配规则path属性设置的值都是以 / 开头，")]),t._v(" "),n("p",[t._v("所以会导致除了对应URL的组件外，默认路由的组件也永远被匹配到")]),t._v(" "),n("p",[n("strong",[t._v("默认路由对应的组件在URL地址pathname为 / 开头时就显示")])]),t._v(" "),n("p",[t._v("从而出现路由切换后默认路由的组件还显示的问题")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("first\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Route path"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/first"')]),t._v(" component"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("First"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Route path"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),t._v(" component"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Default"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),n("p",[t._v("如下：路由跳转后Login页面展示Home组件还保留在页面")]),t._v(" "),n("p",[t._v("并按照Route组件的定义顺序展现")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Home extends React.Component {\n  render() {\n    return (\n      <div>Home页面</div>\n    )\n  }\n}\nclass Login extends React.Component {\n  render() {\n    return (\n      <div>Login页面</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Link to="login">登陆页面</Link>\n\n      <Route path="/" component={Home} />\n      \n      <Route path="/login" component={Login} />\n      \n    </div>\n  </Router>,\n  document.getElementById(\'root\')\n)\n')])])]),n("hr"),t._v(" "),n("h4",{attrs:{id:"_2-子路由永远被匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-子路由永远被匹配"}},[t._v("#")]),t._v(" 2. 子路由永远被匹配")]),t._v(" "),n("p",[t._v("因为只要URL地址的pathname是以Route的path属性值开头就匹配上")]),t._v(" "),n("p",[t._v("所以当URL地址包含了Route设置的path属性值，就展示该组件")]),t._v(" "),n("p",[t._v("即，"),n("strong",[t._v("以这个path属性值开头的所有URL地址都可以匹配上对应组件")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("first\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("first"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("first"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("b\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("first"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("b\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Route path"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/first"')]),t._v(" component"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Login"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),n("p",[t._v("如下：即使Link组件的URL连接为无数层的子路由")]),t._v(" "),n("p",[t._v("依然可以匹配上父路由 /first 对应的组件")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Login extends React.Component {\n  render() {\n    return (\n      <div>Login页面</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Link to="/login/a/b/c/d">登陆页面</Link>\n\n      <Route path="/login" component={Login} />\n\n    </div>\n  </Router>,\n  document.getElementById(\'root\')\n)\n')])])]),n("h3",{attrs:{id:"精确匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#精确匹配"}},[t._v("#")]),t._v(" 精确匹配")]),t._v(" "),n("p",[t._v("可通过**exact属性 **由进行 "),n("strong",[t._v("精确匹配")])]),t._v(" "),n("p",[n("strong",[t._v("只有URL地址的pathname与Route的path属性值完全一致时才匹配")])]),t._v(" "),n("p",[t._v("为了解决React模糊匹配导致的默认路由匹配问题，详见上文 "),n("a",{attrs:{href:""}},[t._v("模糊匹配")])]),t._v(" "),n("p",[t._v("可以"),n("strong",[t._v("对默认路由进行精确匹配")]),t._v("，仅在Route组件的匹配规则path属性值与URL地址完全一致时，才展示默认路由对应组件")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/\n\n<Route exact path="/" component={First} />\n')])])]),n("p",[t._v("如下：")]),t._v(" "),n("p",[t._v("通过exact属性，使默认路由对应的组件仅在URL地址为 / 使显示")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Home extends React.Component {\n  render() {\n    return (\n      <div>Home页面</div>\n    )\n  }\n}\nclass Login extends React.Component {\n  render() {\n    return (\n      <div>Login页面</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Link to="/">首页</Link>\n      <Link to="/login">登陆页</Link>\n\n      <Route exact path="/" component={Home} />\n      <Route path="/login" component={Login} />\n\n    </div>\n  </Router>,\n  document.getElementById(\'root\')\n)\n')])])]),n("h2",{attrs:{id:"路由参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由参数"}},[t._v("#")]),t._v(" 路由参数")]),t._v(" "),n("h2",{attrs:{id:"路由懒加载-lazyload"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载-lazyload"}},[t._v("#")]),t._v(" 路由懒加载 lazyload")]),t._v(" "),n("p",[t._v("若是直接import 引入的话，")]),t._v(" "),n("p",[t._v("页面加载时，所有路由组件都被引入页面中了")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import Component01 from './Component01'\nimport Component02 from './Component02'\n")])])]),n("p",[t._v("若想出现懒加载，点击那个路由才加载哪个路由组件到页面")]),t._v(" "),n("p",[t._v("若网速不够等情况导致没有加载出来时，会加载出loading组件")]),t._v(" "),n("p",[t._v("如下：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { lazy, Suspense } from 'react';\n\n\nconst Component01 = lazy(()=> impor'./Component01');\nconst Component02 = lazy(()=> impor'./Component02');\n\n\n<Suspense fallback={ <加载中页面组件/>}>\n \t\t<Route path=\"/01\" component={ Component01}/ >\n  \t<Route path=\"/01\" component={ Component01}/ >\n</Suspense>\n")])])]),n("ol",[n("li",[t._v("导入lazy, Suspense 组件")]),t._v(" "),n("li",[t._v("lazy懒加载导入路由组件")]),t._v(" "),n("li",[t._v("suspense包裹Route路由匹配组件，并导入loading等待时组件（loading组件不能lazy导入，只能普通导入）")])]),t._v(" "),n("h2",{attrs:{id:"路由组件-一般组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由组件-一般组件"}},[t._v("#")]),t._v(" 路由组件 一般组件")]),t._v(" "),n("p",[t._v("由Router匹配的组件叫路由组件，其余都是一般组件")]),t._v(" "),n("p",[t._v("路由组件上自带props属性，里面包含history、location、match")]),t._v(" "),n("h3",{attrs:{id:"witchrouter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#witchrouter"}},[t._v("#")]),t._v(" witchRouter()")]),t._v(" "),n("p",[t._v("一般组件调用时不传入数据的话props属性是个空对象")]),t._v(" "),n("p",[t._v("可使用withRouter方法将一般组件转换为路由组件")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { withRouter } from 'react-router';\n\nfunction demo(props){\n  console.log(props)  \n  return (\n  \t<div>Hello</div>\n  )\n}\n\nexport default withRouter(demo)\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);